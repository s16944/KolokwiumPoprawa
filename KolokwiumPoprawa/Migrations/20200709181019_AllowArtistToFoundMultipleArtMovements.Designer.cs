// <auto-generated />
using System;
using KolokwiumPoprawa.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KolokwiumPoprawa.Migrations
{
    [DbContext(typeof(ArtistsDbContext))]
    [Migration("20200709181019_AllowArtistToFoundMultipleArtMovements")]
    partial class AllowArtistToFoundMultipleArtMovements
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KolokwiumPoprawa.Models.ArtMovement", b =>
                {
                    b.Property<int>("IdArtMovement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFounded")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMovementFounder")
                        .HasColumnType("int");

                    b.Property<int>("IdNextArtMovement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdArtMovement");

                    b.HasIndex("IdMovementFounder");

                    b.HasIndex("IdNextArtMovement");

                    b.ToTable("ArtMovements");
                });

            modelBuilder.Entity("KolokwiumPoprawa.Models.Artist", b =>
                {
                    b.Property<int>("IdArtist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IdArtMovement")
                        .HasColumnType("int");

                    b.Property<int>("IdCityOfBirth")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdArtist");

                    b.HasIndex("IdArtMovement");

                    b.HasIndex("IdCityOfBirth");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("KolokwiumPoprawa.Models.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Population")
                        .HasColumnType("int");

                    b.HasKey("IdCity");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("KolokwiumPoprawa.Models.Painting", b =>
                {
                    b.Property<int>("IdPainting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArtist")
                        .HasColumnType("int");

                    b.Property<int>("IdCoAuthor")
                        .HasColumnType("int");

                    b.Property<string>("PaintingMedia")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SurfaceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdPainting");

                    b.HasIndex("IdArtist");

                    b.HasIndex("IdCoAuthor");

                    b.ToTable("Paintings");
                });

            modelBuilder.Entity("KolokwiumPoprawa.Models.ArtMovement", b =>
                {
                    b.HasOne("KolokwiumPoprawa.Models.Artist", "MovementFounder")
                        .WithMany("FoundedArtMovements")
                        .HasForeignKey("IdMovementFounder")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolokwiumPoprawa.Models.ArtMovement", "NextArtMovement")
                        .WithMany("PreviousArtMovements")
                        .HasForeignKey("IdNextArtMovement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KolokwiumPoprawa.Models.Artist", b =>
                {
                    b.HasOne("KolokwiumPoprawa.Models.ArtMovement", "ArtMovement")
                        .WithMany("Artists")
                        .HasForeignKey("IdArtMovement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolokwiumPoprawa.Models.City", "CityOfBirth")
                        .WithMany("Artists")
                        .HasForeignKey("IdCityOfBirth")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KolokwiumPoprawa.Models.Painting", b =>
                {
                    b.HasOne("KolokwiumPoprawa.Models.Artist", "Artist")
                        .WithMany("Paintings")
                        .HasForeignKey("IdArtist")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolokwiumPoprawa.Models.Artist", "CoAuthor")
                        .WithMany("CoAuthorPaintings")
                        .HasForeignKey("IdCoAuthor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
